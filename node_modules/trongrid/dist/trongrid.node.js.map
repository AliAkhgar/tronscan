{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"injectpromise\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///./src/utils/Validator.js","webpack:///./src/lib/core/Account.js","webpack:///./src/lib/core/Asset.js","webpack:///./src/lib/core/Block.js","webpack:///./src/lib/core/Contract.js","webpack:///./src/lib/core/Transaction.js","webpack:///./src/lib/plugins/TronWebPlugin.js","webpack:///./src/lib/apis/APIClient.js","webpack:///./src/lib/core/Base.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","tronWeb","utils","account","APIClient","tronGrid","classCallCheck_default","this","apiNode","eventServer","path","options","callback","method","arguments","length","undefined","experimental","request","then","response","only_data_and_fingerprint","data","meta","fingerprint","catch","err","_httpClient","Validator","Error","typeof_default","indexOf","address","isAddress","identifier","test","blockNumber","toString","transactionID","limit","isInteger","eventName","minBlockTimestamp","maxBlockTimestamp","Base","TronGrid","injectPromise","injectpromise","validator","Account","_this","possibleConstructorReturn_default","getPrototypeOf_default","isFunction","validateAddress","fromHex","concat","getTransactions","getTrc20Transactions","Asset","validateAssetIdentifier","validateOptions","getList","getAll","Block","validateBlockNumber","getEvents","Contract","contractAddress","getTrc20Tokens","listener","lastBlock","since","Date","now","eventWatcher","_callee","events","_events$sort","_events$sort2","latestEvent","newEvents","regenerator_default","a","wrap","_context","prev","next","assign","orderBy","_this2","sent","sort","b","block_timestamp","slicedToArray_default","filter","event","index","slice","some","priorEvent","JSON","stringify","abrupt","t0","Promise","reject","stop","bindListener","clearInterval","setInterval","forEach","start","Transaction","validateTransactionId","TronWebPlugin","setExperimental","defaultAddress","hex","direction","offset","only_to","only_from","asset","block","contract","transaction","apiClient","code","tronWebPlugin","requires","components","trx","getTransactionsRelated","validatePageData","links","nextPage"],"mappings":"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","file":"trongrid.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"injectpromise\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","let tronWeb;\nlet utils;\n\nexport default class Validator {\n\n    constructor(tronGrid) {\n        tronWeb = tronGrid.tronWeb;\n        utils = tronWeb.utils;\n    }\n\n    validatePageData(data) {\n        if (!data) {\n            throw new Error('Invalid data provided.');\n        } else if (typeof data !== 'string' && typeof data !== 'object'){\n            throw new Error('Invalid data format provided.');\n        } else if (typeof data === 'string' && data.indexOf('fingerprint') === -1) {\n            throw new Error('It\\'s the last page or missed fingerprint in the links.');\n        } else if (typeof data === 'object' && (!data.meta || !data.meta.fingerprint)) {\n            throw new Error('It\\'s the last page or missed fingerprint in the json.');\n        }\n    }\n\n    validateAddress(address) {\n        if (!tronWeb.isAddress(address))\n            throw new Error('Invalid address provided.');\n    }\n\n    validateAssetIdentifier(identifier) {\n        if (!identifier || /[^a-zA-Z0-9_]+/.test(identifier))\n            throw new Error('Invalid identifier provided.');\n    }\n\n    validateBlockNumber(blockNumber) {\n        if (blockNumber === 'latest') {\n            return;\n        }\n        if (!blockNumber || /[^0-9]/.test(blockNumber.toString())) {\n            throw new Error('Invalid block number provided.');\n        }\n    }\n\n    validateTransactionId(transactionID) {\n        if (!/^[a-z0-9]{64}/.test(transactionID)) {\n            throw new Error('Invalid transaction id provided.');\n        }\n    }\n\n    validateOptions(options) {\n        if (options.limit) {\n            if (!utils.isInteger(options.limit) || options.limit < 0 || options.limit > 200) {\n                throw new Error('Limit should be a number between 0 and 200.');\n            }\n        }\n        if (options.blockNumber && !options.eventName) {\n            throw new Error('Usage of block number filtering requires an event name.');\n        }\n        if (options.minBlockTimestamp && !utils.isInteger(options.minBlockTimestamp)) {\n            throw new Error('Invalid minBlockTimestamp provided.');\n        }\n        if (options.maxBlockTimestamp && (!utils.isInteger(options.maxBlockTimestamp) && options.maxBlockTimestamp !== 'now')) {\n            throw new Error('Invalid maxBlockTimestamp provided.');\n        }\n    }\n\n};\n","import Base from './Base';\n\nlet utils;\n\nexport default class Account extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils;\n    }\n\n    /**\n     * @name TG API: /v1/accounts/:address\n     * @param address (hex or base58 format)\n     * @param options (filters: only_confirmed)\n     * @param callback\n     * @returns account\n     */\n    get(address, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.get, address, options);\n\n        this.validator.validateAddress(address);\n\n        if (address.length !== 34)\n            address = this.tronWeb.address.fromHex(address);\n\n        return this.APIClient.get(`v1/accounts/${address}`, options, callback);\n    }\n\n    /**\n     * @name TG3 API: /v1/accounts/:address/transactions\n     * @param address\n     * @param options\n     * @param callback\n     * @returns list of transactions\n     */\n    getTransactions(address, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactions, address, options);\n\n        this.validator.validateAddress(address);\n\n        if (address.length !== 34)\n            address = this.tronWeb.address.fromHex(address);\n\n        return this.APIClient.get(`v1/accounts/${address}/transactions`, options, callback);\n    }\n\n    /**\n     * @name TG3 API: /v1/accounts/:address/transactions/trc20\n     * @param address\n     * @param options\n     * @param callback\n     * @returns list of transactions\n     */\n    getTrc20Transactions(address, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTrc20Transactions, address, options);\n\n        this.validator.validateAddress(address);\n\n        if (address.length !== 34)\n            address = this.tronWeb.address.fromHex(address);\n\n        return this.APIClient.get(`v1/accounts/${address}/transactions/trc20`, options, callback);\n    }\n\n}\n","import Base from './Base';\n\nlet utils;\n\nexport default class Asset extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils;\n    }\n\n    /**\n     * @name TG API: /v1/assets/:identifier\n     * @param identifier (asset ID, or issuer address)\n     * @param callback\n     * @returns list of assets\n     */\n    get(identifier = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        this.validator.validateAssetIdentifier(identifier);\n\n        if (!callback)\n            return this.injectPromise(this.get, identifier, options);\n\n        if (this.tronGrid.experimental)\n            options.experimental = this.tronGrid.experimental;\n\n        this.APIClient.get(`v1/assets/${identifier}`, options, callback);\n    }\n\n    /**\n     * @name TG API: /v1/assets/:name/list\n     * @param name of the asset\n     * @param options (limit, fingerprint, sort, filter)\n     * @param callback\n     * @returns list of assets\n     */\n    getList(name = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        this.validator.validateAssetIdentifier(name);\n\n        this.validator.validateOptions(options);\n\n        if (!callback)\n            return this.injectPromise(this.getList, name, options);\n\n        return this.APIClient.get(`v1/assets/${name}/list`, options, callback);\n    }\n\n    /**\n     * @name TG API: /v1/assets\n     * @param lists all the assets\n     * @param options (limit, fingerprint, sort, filter)\n     * @param callback\n     * @returns list of assets\n     */\n    getAll(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        this.validator.validateOptions(options);\n\n        if (!callback)\n            return this.injectPromise(this.getAll, options);\n\n        return this.APIClient.get(`v1/assets`, options, callback);\n    }\n}\n","import Base from './Base';\n\nlet utils;\n\nexport default class Block extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils;\n    }\n\n    /**\n     * @name TG API: /v1/blocks/:blockNumber/events\n     * @param blockNumber\n     * @param callback\n     * @returns list of events\n     */\n    getEvents(blockNumber = 'latest', options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.getEvents, blockNumber, options);\n        }\n\n        this.validator.validateBlockNumber(blockNumber);\n\n        return this.APIClient.get(`v1/blocks/${blockNumber}/events`, options, callback);\n\n    }\n\n}\n","import Base from './Base';\n\nlet utils;\n\nexport default class Contract extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils;\n    }\n\n    /**\n     * @name TG API: /v1//contracts/:contractAddress\n     * @param contractAddress\n     * @param options(onlyConfirmed, onlyUnconfirmed, eventName, blockNumber, fromTimestamp, size, previousFingerprint, sort)\n     * @param callback\n     * @returns list of events\n     */\n    getEvents(contractAddress, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getEvents, contractAddress, options);\n\n        this.validator.validateAddress(contractAddress);\n\n        this.validator.validateOptions(options);\n\n        contractAddress = this.tronWeb.address.fromHex(contractAddress);\n\n        return this.APIClient.get(`v1/contracts/${contractAddress}/events`, options, callback);\n    }\n\n    /**\n     * @name TG API: /v1//contracts/:contractAdderss/tokens\n     * @param contractAddress\n     * @param options(onlyConfirmed, onlyUnconfirmed, previousFingerprint, orderBy, limit)\n     * @param callback\n     * @returns list of trc20 tokens\n     */\n    getTrc20Tokens(contractAddress, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTrc20Tokens, contractAddress, options);\n\n        this.validator.validateAddress(contractAddress);\n\n        contractAddress = this.tronWeb.address.fromHex(contractAddress);\n\n        return this.APIClient.get(`v1/contracts/${contractAddress}/tokens`, options, callback);\n    }\n\n    async watchEvent(contractAddress, eventName, options = {}, callback = false) {\n        let listener = false;\n        let lastBlock = false;\n        let since = Date.now() - 1000;\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!utils.isFunction(callback)) {\n            throw new Error('Invalid callback function provided');\n        }\n\n        const eventWatcher = async () => {\n            try {\n                options = Object.assign({\n                    eventName,\n                    minBlockTimestamp: since,\n                    orderBy: 'timestamp,desc',\n                    // TODO:\n                    // add filters => eventron is already equipped for them\n                    // filters: options.filters\n                }, options)\n\n                let events;\n\n                if(options.only_data_and_fingerprint) {\n                    events = await this.getEvents(contractAddress, options);\n                } else {\n                    const response = await this.getEvents(contractAddress, options);\n                    events = response.data;\n                }\n\n                const [latestEvent] = events.sort((a, b) => b.block_timestamp - a.block_timestamp);\n\n                const newEvents = events.filter((event, index) => {\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate) return false;\n\n                    if (!lastBlock) return true;\n\n                    return event.block_timestamp > lastBlock;\n                });\n\n                if (latestEvent) lastBlock = latestEvent.block_timestamp;\n                return newEvents;\n\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                eventWatcher().then(events => events.forEach(event => {\n                    callback(null, event)\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await eventWatcher();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n\n}\n","import Base from './Base';\n\nlet utils;\n\nexport default class Transaction extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils;\n    }\n\n    /**\n     * @name TG API: /transaction/:id\n     * @param transactionID\n     * @param callback\n     * @returns list of events\n     */\n    getEvents(transactionID = false, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.getEvents, transactionID, options);\n        }\n\n        this.validator.validateTransactionId(transactionID);\n\n        return this.APIClient.get(`v1/transactions/${transactionID}/events`, options, callback);\n    }\n\n}\n","import Base from '../core/Base';\n\nlet utils;\nlet account;\n\nexport default class TronWebPlugin extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils;\n        account = this.tronGrid.account;\n    }\n\n    setExperimental(experimental) {\n        this.tronGrid.setExperimental(experimental);\n    }\n\n    async getTransactions(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 20, offset = 0, callback = false) {\n\n        if (utils.isFunction(offset)) {\n            callback = offset;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 20;\n        }\n\n        if (utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        const options = {\n            limit,\n            only_data_and_fingerprint: true\n        }\n        if (direction === 'to') {\n            options.only_to = true\n        } else if (direction === 'from') {\n            options.only_from = true\n        }\n        return account.getTransactions(address, options, callback)\n    }\n\n}\n","\nexport default class APIClient {\n\n    constructor(tronGrid) {\n        this.tronGrid = tronGrid;\n        this.apiNode = tronGrid.tronWeb.eventServer;\n    }\n\n    _httpClient(path, options, callback, method = 'get') {\n\n        if (!options.experimental && this.tronGrid.experimental) {\n            options.experimental = this.tronGrid.experimental;\n        }\n\n        this.apiNode.request(path, options, method).then(response => {\n            if (options.only_data_and_fingerprint) {\n                callback(null, response.data, response.meta.fingerprint);\n            } else {\n                callback(null, response);\n            }\n        }).catch(err => callback(err));\n\n    }\n\n    get(path, options, callback) {\n        return this._httpClient(path, options, callback, 'get');\n    }\n\n    //TODO\n    post(...params) {}\n\n    //TODO\n    put(...params) {}\n\n    //TODO\n    del(...params) {}\n\n}\n","import TronGrid from '../../index';\nimport APIClient from '../apis/APIClient';\nimport validator from '../../utils/Validator';\nimport injectpromise from 'injectpromise';\n\nclass Base {\n\n    constructor(tronGrid) {\n        if (!tronGrid || !(tronGrid instanceof TronGrid))\n            throw new Error('Expected instance of TronGrid');\n\n        this.tronGrid = tronGrid;\n        this.tronWeb = tronGrid.tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.apiNode = this.tronWeb.eventServer;\n        this.utils = this.tronWeb.utils;\n        this.validator = new validator(tronGrid);\n        this.APIClient = new APIClient(tronGrid);\n    }\n\n}\n\nexport default Base\n","import Account from 'lib/core/Account';\nimport Asset from 'lib/core/Asset';\nimport Block from 'lib/core/Block';\nimport Contract from 'lib/core/Contract';\nimport Transaction from 'lib/core/Transaction';\nimport TronWebPlugin from 'lib/plugins/TronWebPlugin';\nimport APIClient from 'lib/apis/APIClient';\nimport validator from 'utils/Validator';\nimport injectpromise from 'injectpromise';\n\nlet utils;\nlet experimental;\n\nexport default class TronGrid {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.utils = utils = tronWeb.utils\n        this.account = new Account(this);\n        this.asset = new Asset(this);\n        this.block = new Block(this);\n        this.contract = new Contract(this);\n        this.transaction = new Transaction(this);\n        this.apiClient = new APIClient(this);\n        this.validator = new validator(this);\n        this.injectPromise = injectpromise(this);\n\n        this.experimental = undefined;\n    }\n\n    setExperimental(code) {\n        this.experimental = code;\n    }\n\n    pluginInterface(options) {\n        if (options.experimental) {\n            experimental = options.experimental\n        }\n        const tronWebPlugin = new TronWebPlugin(this);\n        tronWebPlugin.setExperimental(options.experimental);\n        return {\n            requires: '^2.2.4',\n            components: {\n                trx: {\n                    getTransactionsRelated: tronWebPlugin.getTransactions\n                }\n            }\n        }\n    }\n\n    nextPage(data, callback) {\n\n        if (!callback)\n            return this.injectPromise(this.nextPage, data);\n\n        this.validator.validatePageData(data);\n\n        if (typeof data === 'string') {\n            return this.apiClient.get(data, {}, callback);\n        } else if (typeof data === 'object') {\n            return this.apiClient.get(data.meta.links.next, {}, callback);\n        }\n    }\n}\n"],"sourceRoot":""}